<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Aventureiros x Horda Infinita</title>

  <style>
    body { font-family: Arial, sans-serif; background: #121212; color: #fff; padding: 20px; }
    h1, h2 { color: #00ffcc; margin: 0 0 8px; }
    .wrap { display: grid; gap: 16px; }
    table { width: 100%; border-collapse: collapse; background: #1e1e1e; }
    th, td { border: 1px solid #444; padding: 8px; text-align: center; }
    th { background: #333; }
    .card { background: #1e1e1e; border: 1px solid #444; border-radius: 10px; padding: 12px; }
    label { display: block; margin: 6px 0; }
    input { background: #0f0f0f; color: #fff; border: 1px solid #444; border-radius: 6px; padding: 6px 8px; }
    button { background: #00ffcc; color: #000; border: 0; border-radius: 8px; padding: 8px 12px; cursor: pointer; font-weight: 700; }
    button:disabled { opacity: .6; cursor: not-allowed; }
    #log { max-height: 50vh; overflow-y: auto; font-size: 14px; line-height: 1.4; }
    .muted { color: #bbb; font-size: 12px; }
    .ok { color: #00ffaa; }
    .warn { color: #ffdd66; }
    .bad { color: #ff6a6a; }
  </style>

  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
    import { getDatabase, ref, onValue } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js";

    // --- CONFIG FIREBASE ---
    const firebaseConfig = {
      apiKey: "AIzaSyBuQ0qPAejqIUomSKU8OCB6dOyss57uveE",
      authDomain: "cavale-e-artificer.firebaseapp.com",
      databaseURL: "https://cavale-e-artificer-default-rtdb.firebaseio.com",
      projectId: "cavale-e-artificer",
      storageBucket: "cavale-e-artificer.appspot.com",
      messagingSenderId: "521069739483",
      appId: "1:521069739483:web:ad9249c8a6c0436176bbfe",
      measurementId: "G-C8Q3JNNL1P"
    };

    const app = initializeApp(firebaseConfig);
    const db = getDatabase(app);
    const aventureirosRef = ref(db, "aventureiros");

    // --- ESTADO ---
    let AVENTUREIROS = []; 
    const rolarCarta = () => Math.floor(Math.random() * 10) + 1; 

    const log = (html, cls="") => {
      const el = document.createElement("div");
      if (cls) el.className = cls;
      el.innerHTML = html;
      LOG.appendChild(el);
      LOG.scrollTop = LOG.scrollHeight;
    };

    function extrairTabelaAtaques(av) {
      for (const [, valor] of Object.entries(av)) {
        if (valor && typeof valor === "object") {
          const temChavesNumericas = Object.keys(valor).some(k => /^\d+$/.test(k));
          if (temChavesNumericas) return valor;
        }
      }
      return null;
    }

    const addResultado = (nome, dano, monstrosMortos, itensMap) => {
      const tbody = document.getElementById("tbody-resultados");
      const tr = document.createElement("tr");

      // formatar drops em "quantidade item"
      const itensStr = Object.entries(itensMap)
        .map(([item, qtd]) => `${qtd} ${item}`)
        .join(", ") || "-";

      tr.innerHTML = `
        <td>${nome}</td>
        <td>${dano}</td>
        <td>${monstrosMortos}</td>
        <td>${itensStr}</td>
      `;
      tbody.appendChild(tr);
    };

    document.addEventListener("DOMContentLoaded", () => {
      window.LOG = document.getElementById("log");
      const TABELA = () => document.getElementById("tbody-aventureiros");

      // carregar aventureiros
      onValue(aventureirosRef, (snapshot) => {
        const tbody = TABELA();
        tbody.innerHTML = "";
        AVENTUREIROS = [];

        snapshot.forEach((child) => {
          const av = child.val();
          const ataques = extrairTabelaAtaques(av);
          const avLocal = {
            ...av,
            ataques,
            vidaMax: Number(av.vida) || 0,
            vida: Number(av.vida) || 0
          };
          AVENTUREIROS.push(avLocal);

          let classesHTML = "";
          if (av.classes) {
            for (const [classe, qtd] of Object.entries(av.classes)) {
              if (Number(qtd) > 0) classesHTML += `<div>${classe}: ${qtd}</div>`;
            }
          }

          let ataquesHTML = "";
          if (ataques) {
            for (let i = 1; i <= 10; i++) {
              ataquesHTML += `<div>${i}: ${ataques[i] ?? 0}</div>`;
            }
          }

          const tr = document.createElement("tr");
          tr.innerHTML = `
            <td>${av.nome ?? "-"}</td>
            <td>${av.vida ?? "-"}</td>
            <td>${classesHTML || "-"}</td>
            <td>${ataquesHTML || "-"}</td>
          `;
          tbody.appendChild(tr);
        });
      });

      // batalha infinita
      document.getElementById("btn-batalha").addEventListener("click", async () => {
        const nomeMonstro = document.getElementById("monstro-nome").value.trim();
        const hpMonstroBase = Number(document.getElementById("monstro-vida").value);
        const danoMonstroBase = Number(document.getElementById("monstro-dano").value);

        // drop 1
        const dropChance1 = Number(document.getElementById("drop1-chance").value);
        const dropItem1 = document.getElementById("drop1-item").value.trim();

        // drop 2
        const dropChance2 = Number(document.getElementById("drop2-chance").value);
        const dropItem2 = document.getElementById("drop2-item").value.trim();

        if (!nomeMonstro || !hpMonstroBase || hpMonstroBase <= 0 || !danoMonstroBase || danoMonstroBase <= 0) {
          alert("Preencha os campos corretamente.");
          return;
        }

        document.getElementById("log").innerHTML = "";
        document.getElementById("tbody-resultados").innerHTML = "";

        for (const avBase of AVENTUREIROS) {
          let av = { ...avBase, vida: avBase.vidaMax };
          let danoCausado = 0;
          let monstrosMortos = 0;
          let itensMap = {}; // {item: qtd}

          const tabelaAtaques = av.ataques || extrairTabelaAtaques(av);

          // bônus do mago
          const bonusMago = av.classes?.mago ? Number(av.classes.mago) : 0;

          log(`<h3>${av.nome} inicia contra hordas de ${nomeMonstro}!</h3>`);

          // inimigos infinitos até vida <= metade
          while (av.vida > av.vidaMax / 2) {
            let hp = hpMonstroBase;

            log(`<b>Novo ${nomeMonstro} apareceu! (HP: ${hp})</b>`);

            while (hp > 0 && av.vida > av.vidaMax / 2) {
              const numero = String(rolarCarta());
              let dano = tabelaAtaques && tabelaAtaques[numero] ? Number(tabelaAtaques[numero]) : 0;

              // aplicar bônus do mago
              if (dano > 0 && bonusMago > 0) {
                dano += bonusMago;
              }

              if (dano > 0) {
                hp -= dano;
                danoCausado += dano;
                log(`${av.nome} usou carta ${numero} e causou <b>${dano}</b> (bônus mago: +${bonusMago}). [HP ${nomeMonstro}: ${hp}]`);
              } else {
                log(`${av.nome} errou o ataque com carta ${numero}.`, "warn");
              }

              if (hp <= 0) {
                monstrosMortos++;

                // drop 1
                if (dropItem1 && Math.random() * 100 < dropChance1) {
                  itensMap[dropItem1] = (itensMap[dropItem1] || 0) + 1;
                  log(`<span class="ok">${av.nome} ganhou: ${dropItem1}!</span>`);
                }

                // drop 2
                if (dropItem2 && Math.random() * 100 < dropChance2) {
                  itensMap[dropItem2] = (itensMap[dropItem2] || 0) + 1;
                  log(`<span class="ok">${av.nome} ganhou: ${dropItem2}!</span>`);
                }

                break;
              }

              // ataque do monstro
              const danoMonstro = Math.floor(Math.random() * danoMonstroBase) + 1;
              av.vida = Math.max(0, av.vida - danoMonstro);
              log(`${nomeMonstro} atacou ${av.nome} e causou <b>${danoMonstro}</b>. [HP ${av.nome}: ${av.vida}]`);
            }
          }

          addResultado(av.nome, danoCausado, monstrosMortos, itensMap);
          log(`<hr>`);
          await new Promise(r => setTimeout(r, 500));
        }
      });
    });
  </script>
</head>

<body>
  <div class="wrap">
    <div class="card">
      <h1>Aventureiros</h1>
      <table>
        <thead>
          <tr>
            <th>Nome</th>
            <th>Vida</th>
            <th>Classes</th>
            <th>Ataques (1–10)</th>
          </tr>
        </thead>
        <tbody id="tbody-aventureiros"></tbody>
      </table>
    </div>

    <div class="card">
      <h2>Configurar Monstro</h2>
      <label>Nome: <input type="text" id="monstro-nome" placeholder="Goblin"/></label>
      <label>Vida: <input type="number" id="monstro-vida" placeholder="150"/></label>
      <label>Dano do monstro: <input type="number" id="monstro-dano" min="1" placeholder="5"/></label>

      <h3>Drops</h3>
      <label>Item 1: <input type="text" id="drop1-item" placeholder="Trigo"/></label>
      <label>% Drop Item 1: <input type="number" id="drop1-chance" min="0" max="100" placeholder="50"/></label>
      <label>Item 2: <input type="text" id="drop2-item" placeholder="Espada"/></label>
      <label>% Drop Item 2: <input type="number" id="drop2-chance" min="0" max="100" placeholder="25"/></label>

      <button id="btn-batalha">Iniciar Batalhas</button>
    </div>

    <div class="card">
      <h2>Log</h2>
      <div id="log"></div>
    </div>

    <div class="card">
      <h2>Resultados</h2>
      <table>
        <thead>
          <tr>
            <th>Aventureiro</th>
            <th>Dano Total</th>
            <th>Monstros Mortos</th>
            <th>Itens Ganhos</th>
          </tr>
        </thead>
        <tbody id="tbody-resultados"></tbody>
      </table>
    </div>
  </div>
</body>
</html>
